El motivo de este arichvo es solo con carcter de consulta 

maximas , reglas generales para el desarrollo

    importante : Recordar ignorar este archivo cuando se haga el merge a main

    funcionalidad por arriba de belleza

    comentar cada funcion que hacer para que sirve que recibe que hace cada constante 

    funciones se declaran primera minuscula segunda mayuscula ejemploFuncion(){}
    clases de declaran en singular y con mayuscula class Ejemplo

    trabajar con atlas:
        crear un archivo .env y agreagar la siguiente linea de codigo
        
        MONGO_URI="mongodb+srv://davstudios95:A05162738a%2A@clusterpruebas.c61iwun.mongodb.net/"

    librerias a usar 
        - dotenv
        - inquirer
        - mongodb

Estructura del menu

tipologia de objetos: Estructura de la base de datos , collecciones y objetos que reciben

base de datos 
    gestor_de_portafolio

colleciones 
    clientes //collecion para registrar clientes con los datos necesario
        {
            nombre : "string" // nombre completo de la persona
            cedula : "string" // cedula
            telefono: "string" // numero de celular
            correo: "string" // correo electronico del cliente
            fecha: "ISODate()" // fecha de creacion del cliente
            propuestas:[] //array vacio que contiene los id *referenciados* de las distintas propuestas
            proyectos:[] // array vacio con los id de los proyectos asociados
            contratos:[] // array vacio con los contratos asociados al cliente
            deuda: "int" //monto que debe el cliente con forme al contrato (debatible)
            estado: true //true o false 
        }

    propuestas
        {
            descripción : "string" //Espacio para poder escribir todo el enunciado (recorda como quiero para)
            precio: "int" //Precio de la propuesta
            plazos: [ISODate(), ISODate] //"fecha-inicial" , "fecha-final"
            estado: enum[pendiente, aceptada, rechazada]. //opciones de la propuesta , el estado inicial de toda propuesta es pendiente 
            clentes:[] //array vacio de los clientes a los cuales va dirigida la propuesta , las misma debe tener los datos del cliente *embebidos*
        }
    
    *ojo* descripción debe de contar con un formato para registrar el dato en su funcion correspondiente
    
    proyectos 
        {   
            nombredelproyecto: "sting"// nombre del proyecto
            descripcion[]: //toda la descripcion del proyecto con un formato especificado (en la funcion)(como quiero para)
            propuestas[]: //array vacio para *embeber* la o las propuestas
            entregables[
                {
                    descripcion:"string" // breve resumen del entregrable
                    fechadeentrega: ISODate, //fecha en la que se entrega el proyecto
                    estado enum (pendiente, entregado, aprobado, rechazado). //el estado inicial siempre debe ser pendiente.
                    link: "string" o "null" //depende del estado
                },
                {...}
            ]: //array vacio para introducir los entregables que son links de drive que contienen archios pdf con todas las instrucciones(debatible).
            
            estados: enum( activo, pausado, finalizado, cancelado),// se cancela cuando el contrato lo decida
            contrato :[
                {
                    condiciones[] //array de stings
                    fecha inicio:  //fecha de inicio del proyecto
                    fecha fin : // fecha de finalizacion del proyecto
                    deuda: // plata
                    cliente : "string" //cliente embebido 
                    desarrollador: // nombre del desarrollador 
                } 

            ] //arreglo vacio que va a ser un embebido del contrato , cada proyecto tiene un solo contrato, puede estar sujeto cambios
            cliente:[] //array vacio con el cliente embebidos
            
        }

    contratos
        {
            condiciones[] //array de stings
            fecha inicio:  //fecha de inicio del proyecto
            fecha fin : // fecha de finalizacion del proyecto
            presupuesto: // plata
            cliente : "string" //cliente embebido 
            desarrollador: // nombre del desarrollador 
        }

    //posible problema para el yo del futuro, acutualizar dos colecciones al vez
    facturacion:
            deudaporcliente:[] //debatible
            pagosdeclientes:[
                {
                    nombre:  "string" 
                    cedula: "sting" //
                    monto: "int" // plata
                    proyectoAsocido: (objectId)//referenciado
                    fecha : ISODate//fecha de registro de facturas
                },{...}

            ] //embebido de los pagos de los clientes 

            
            
            
            
            //Transacciones para registrar pagos, evitar duplicidad o pérdidas de consistencia.

classes

class Cliente{} para crear objetos de tipo cliente

funcion menu() // Debe estar en app.js y desplegar un menu con opciones que redirijan a los metodos o funciones a implementar de esta manera se modulariza el codigo

//buscar mas abajo cada funcion por su nombre para ver para que sirve

    Gestionar clientes
        Listar clientes:
            listarClientes():
        Crear un cliente:
            crearCliente():
        actualizar datos de un cliente:
            actualizarCliente():
        eliminar un cliente()
            eliminarCliente():
        
       
    gestion de propuestas:
        crear de propuestas:
            crearPropuestas(){
                integrarCliente():
                    //debe de asignar almenos a un cliente
                    // Asociar cliente a propuestas
                }
        
        cambiar estado de la propuesta 
            cambiarEstado():
            
        modicar propuesta

        eliminar propuesta 

            
            exportarPdf()//funcilanlidad a futuro no prioritaria
    
    gestion de proyectos:
        menu de proyectos
            Listar proyectos:
                listarProyectos():
            Crear un proyecto:
                crearProyecto()
            actualizar estado del proyecto :
                actualizarProyecto():
            eliminar un proyecto():
                eliminarProyecto():
        
        generar un proyecto a paratir de los proyectos aceptados
            exportarPdf()

    contratos
        listar contratos
            listarContratos()
        crear contrato a partir de proyectos aprobados y en estado activo
            añadirContrato()

    registros de pagos 
        crud de pagos

    
async function listarClientes(){
    //devuelve un table/array/log con la lista de todos los clientes y sus datos , asi como tambien los proyectos a los cuales esta asociado 
    //en caso de que no hayan clientes mostrar "No hay clientes registrados de momento"
}


async function crearCliente(){
    //debe registrar en mongodb el cliente con los datos del siguiente objeto :
    {
        nombre : "string" // nombre completo de la persona
        cedula : "string" // cedula
        telefono: "string" // numero de celular
        correo: "string" // correo electronico del cliente
        fecha: "ISODate()" // fecha de creacion del cliente
      
        propuestas:[] //array vacio que contiene los id *referenciados* de las distintas propuestas, si no tiene retornar un array vacio
        proyectos:[] // array vacio con los id de los proyectos asociados, 
        contratos:[] // array vacio con los contratos asociados al cliente
        
        deuda: "int" //monto que debe el cliente con forme a los proyectos asociados
    }
    //debe validar los tipos de datos a recibir, no pueden quedar campos vacios amenos que sean los arrays 
    //usar insertOne.({})
        
}


async function actualizarCliente(){
    //devuelve una lista de clientes, luego los permite seleccionar para editar posteriormente
    //permite poner denuevo el estado a true
    //no deberia dejar editar los campos de propuesta , proyectos , contratos ni deuda

}


async function eliminarCliente(){
    //cambia el estado del cliente de true a false , si desea elminiarlo , eliminelo desde la base de datos
}

// debatir si debe dejarse crear la propuesta o no si hay o no clientes
async function crearPrppuestas(){

    //permite ingresar los datos para este objeto 
    
    {
        descripción : "string" //Espacio para poder escribir todo el enunciado (recorda como quiero para)
        precio: "int" //Precio de la propuesta
        plazos: [ISODate(), ISODate] //"fecha-inicial" , "fecha-final"
        estado: enum[pendiente, aceptada, rechazada]. //opciones de la propuesta , el estado inicial de toda propuesta es pendiente 
        clentes:[
            integrarCliente():
        ] //array vacio de los clientes a los cuales va dirigida la propuesta , las misma debe tener los datos del cliente *embebidos*
    }

}

async function integrarCliente(){
    //debe listar los clientes con estado true y dispobibles y añadir uno o varios
    //funcionalidad extra, permitir hacer una busqueda ingresando la cedula o algo que permita referenciar directamente al cliente 
    //Retornar el cliente seleccionado y embeberlo
    //debe añadir el objectId de la propuesta a la collecion del cliente seleccionado en el array propuesta
    
}


async funcion cambiarEstado(){

}